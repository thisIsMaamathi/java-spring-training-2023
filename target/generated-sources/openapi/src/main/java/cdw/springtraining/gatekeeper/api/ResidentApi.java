/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cdw.springtraining.gatekeeper.api;

import cdw.springtraining.gatekeeper.models.BadRequestError;
import cdw.springtraining.gatekeeper.models.ForbiddenError;
import cdw.springtraining.gatekeeper.models.InternalServerError;
import cdw.springtraining.gatekeeper.models.NotFoundError;
import cdw.springtraining.gatekeeper.models.ScheduleRequest;
import cdw.springtraining.gatekeeper.models.ScheduleResponse;
import cdw.springtraining.gatekeeper.models.UnauthorizedError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-26T16:12:55.335364+05:30[Asia/Kolkata]")
@Validated
@Api(value = "Resident", description = "the Resident API")
public interface ResidentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /resident/cancel/{visitorId} : To remove a visitor
     *
     * @param visitorId  (required)
     * @return Successful deletion (status code 204)
     *         or 400 BAD REQUEST (status code 400)
     *         or 401 UNAUTHORIZED (status code 401)
     *         or 500 INTERNAL SERVER ERROR (status code 500)
     *         or 403 FORBIDDEN (status code 403)
     *         or 404 NOT FOUND (status code 404)
     */
    @ApiOperation(value = "To remove a visitor", nickname = "cancelVisitor", notes = "", tags={ "resident", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful deletion"),
        @ApiResponse(code = 400, message = "400 BAD REQUEST", response = BadRequestError.class),
        @ApiResponse(code = 401, message = "401 UNAUTHORIZED", response = UnauthorizedError.class),
        @ApiResponse(code = 500, message = "500 INTERNAL SERVER ERROR", response = InternalServerError.class),
        @ApiResponse(code = 403, message = "403 FORBIDDEN", response = ForbiddenError.class),
        @ApiResponse(code = 404, message = "404 NOT FOUND", response = NotFoundError.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/resident/cancel/{visitorId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> cancelVisitor(@ApiParam(value = "", required = true) @PathVariable("visitorId") Integer visitorId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /resident/schedule : Allow the resident to schedule a visitors entry and generate a pass
     *
     * @param scheduleRequest  (required)
     * @return 201 CREATED (status code 201)
     *         or 400 BAD REQUEST (status code 400)
     *         or 401 UNAUTHORIZED (status code 401)
     *         or 500 INTERNAL SERVER ERROR (status code 500)
     *         or 403 FORBIDDEN (status code 403)
     */
    @ApiOperation(value = "Allow the resident to schedule a visitors entry and generate a pass", nickname = "scheduleVisitorEntry", notes = "", response = ScheduleResponse.class, tags={ "resident", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "201 CREATED", response = ScheduleResponse.class),
        @ApiResponse(code = 400, message = "400 BAD REQUEST", response = BadRequestError.class),
        @ApiResponse(code = 401, message = "401 UNAUTHORIZED", response = UnauthorizedError.class),
        @ApiResponse(code = 500, message = "500 INTERNAL SERVER ERROR", response = InternalServerError.class),
        @ApiResponse(code = 403, message = "403 FORBIDDEN", response = ForbiddenError.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/resident/schedule",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ScheduleResponse> scheduleVisitorEntry(@ApiParam(value = "", required = true) @Valid @RequestBody ScheduleRequest scheduleRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"additionalInformation\" : \"additionalInformation\", \"phone\" : 1, \"pass\" : \"pass\", \"name\" : \"name\", \"aadhar\" : 6, \"residenceId\" : 5, \"visitorId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
