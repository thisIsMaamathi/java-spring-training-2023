/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cdw.springtraining.gatekeeper.api;

import cdw.springtraining.gatekeeper.models.BlackListRequest;
import cdw.springtraining.gatekeeper.models.GateKeeperApprovalRequest;
import java.time.LocalDate;
import cdw.springtraining.gatekeeper.models.Visitor;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-05T17:35:41.371367+05:30[Asia/Kolkata]")
@Validated
@Api(value = "GateKeeper", description = "the GateKeeper API")
public interface GateKeeperApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /gateKeeper/approve/{visitorId} : allows Gatekeeper to approve a visitor
     *
     * @param visitorId  (required)
     * @param gateKeeperApprovalRequest  (required)
     * @return Approved the vistor (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "allows Gatekeeper to approve a visitor", nickname = "approveVisitor", notes = "", response = String.class, tags={ "GateKeeper", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Approved the vistor", response = String.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gateKeeper/approve/{visitorId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> approveVisitor(@ApiParam(value = "", required = true) @PathVariable("visitorId") Integer visitorId,@ApiParam(value = "", required = true) @Valid @RequestBody GateKeeperApprovalRequest gateKeeperApprovalRequest) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /gatekeeper/blacklist : Blacklist a visitor
     *
     * @param blackListRequest  (required)
     * @return Added to blacklist (status code 204)
     *         or Visitor not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Blacklist a visitor", nickname = "gatekeeperBlacklist", notes = "", tags={ "GateKeeper", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Added to blacklist"),
        @ApiResponse(code = 404, message = "Visitor not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gatekeeper/blacklist",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> gatekeeperBlacklist(@ApiParam(value = "", required = true) @Valid @RequestBody BlackListRequest blackListRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gatekeeper/visitors : Get a list of visitors as per given date
     *
     * @param date  (required)
     * @return A List of all visitors visiting on that date (status code 200)
     *         or Visitor not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Get a list of visitors as per given date", nickname = "getVisitorsByDate", notes = "", response = Visitor.class, responseContainer = "List", tags={ "GateKeeper", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A List of all visitors visiting on that date", response = Visitor.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Visitor not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gatekeeper/visitors",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Visitor>> getVisitorsByDate(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "date", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate date) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"visitorName\" : \"visitorName\", \"residenceId\" : 6, \"visitorId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
