/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cdw.springtraining.gatekeeper.api;

import cdw.springtraining.gatekeeper.models.CreateGateKeeper;
import cdw.springtraining.gatekeeper.models.CreateResident;
import cdw.springtraining.gatekeeper.models.GateKeeperObject;
import cdw.springtraining.gatekeeper.models.ResidentObject;
import cdw.springtraining.gatekeeper.models.UpdateGateKeeper;
import cdw.springtraining.gatekeeper.models.UpdateResident;
import cdw.springtraining.gatekeeper.models.UserObject;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-17T13:15:27.851200+05:30[Asia/Kolkata]")
@Validated
@Api(value = "Admin", description = "the Admin API")
public interface AdminApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /requests/approve/{requestId} : Approve and save a user to database
     *
     * @param requestId  (required)
     * @return Approved the user (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Approve and save a user to database", nickname = "approveUser", notes = "", response = UserObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Approved the user", response = UserObject.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/requests/approve/{requestId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserObject> approveUser(@ApiParam(value = "", required = true) @PathVariable("requestId") Integer requestId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 1, \"aadhar\" : 6, \"userType\" : \"userType\", \"userName\" : \"userName\", \"userId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /gatekeepers : Create a new gatekeeper
     *
     * @param createGateKeeper  (required)
     * @return Created a GateKeeper (status code 201)
     *         or Bad Request (invalid request payload) (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create a new gatekeeper", nickname = "createGateKeeper", notes = "", response = GateKeeperObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created a GateKeeper", response = GateKeeperObject.class),
        @ApiResponse(code = 400, message = "Bad Request (invalid request payload)"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gatekeepers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GateKeeperObject> createGateKeeper(@ApiParam(value = "", required = true) @Valid @RequestBody CreateGateKeeper createGateKeeper) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"gateId\" : 6, \"aadhar\" : 1, \"id\" : 0, \"gateKeeperName\" : \"gateKeeperName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /residents : Create a new resident
     *
     * @param createResident  (required)
     * @return Created a resident (status code 201)
     *         or Bad Request (invalid request payload) (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create a new resident", nickname = "createResidents", notes = "", response = ResidentObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created a resident", response = ResidentObject.class),
        @ApiResponse(code = 400, message = "Bad Request (invalid request payload)"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/residents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResidentObject> createResidents(@ApiParam(value = "", required = true) @Valid @RequestBody CreateResident createResident) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"residentName\" : \"residentName\", \"aadhar\" : 1, \"id\" : 0, \"residenceId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gatekeepers/{gatekeeperId} : Delete a gateKeeper by ID
     *
     * @param gatekeeperId  (required)
     * @return Successful deletion (status code 200)
     *         or Resident not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Delete a gateKeeper by ID", nickname = "deleteGateKeeper", notes = "", response = String.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deletion", response = String.class),
        @ApiResponse(code = 404, message = "Resident not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gatekeepers/{gatekeeperId}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteGateKeeper(@ApiParam(value = "", required = true) @PathVariable("gatekeeperId") Integer gatekeeperId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /residents/{residentId} : Delete a resident by ID
     *
     * @param residentId  (required)
     * @return Successful Deletion (status code 200)
     *         or Resident not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Delete a resident by ID", nickname = "deleteResidents", notes = "", response = String.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Deletion", response = String.class),
        @ApiResponse(code = 404, message = "Resident not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/residents/{residentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteResidents(@ApiParam(value = "", required = true) @PathVariable("residentId") Integer residentId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gatekeepers : To display a List of all gatekeepers
     *
     * @return A List of all gatekeepers (status code 200)
     */
    @ApiOperation(value = "To display a List of all gatekeepers", nickname = "getGateKeeper", notes = "", response = GateKeeperObject.class, responseContainer = "List", tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A List of all gatekeepers", response = GateKeeperObject.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gatekeepers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GateKeeperObject>> getGateKeeper() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"gateId\" : 6, \"aadhar\" : 1, \"id\" : 0, \"gateKeeperName\" : \"gateKeeperName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /residents : To display a List of all residents
     *
     * @return A List of all residents (status code 200)
     */
    @ApiOperation(value = "To display a List of all residents", nickname = "getResidents", notes = "", response = ResidentObject.class, responseContainer = "List", tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A List of all residents", response = ResidentObject.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/residents",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ResidentObject>> getResidents() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"residentName\" : \"residentName\", \"aadhar\" : 1, \"id\" : 0, \"residenceId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /residents/{residentId} : Get a resident by ID
     *
     * @param residentId  (required)
     * @return The requested resident (status code 200)
     *         or Resident not found (status code 404)
     */
    @ApiOperation(value = "Get a resident by ID", nickname = "getResidentsById", notes = "", response = ResidentObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested resident", response = ResidentObject.class),
        @ApiResponse(code = 404, message = "Resident not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/residents/{residentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResidentObject> getResidentsById(@ApiParam(value = "", required = true) @PathVariable("residentId") Integer residentId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"residentName\" : \"residentName\", \"aadhar\" : 1, \"id\" : 0, \"residenceId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gatekeepers/{gatekeeperId} : Get a gateKeeper by ID
     *
     * @param gatekeeperId  (required)
     * @return The requested Gatekeeper has been retrived (status code 200)
     *         or GateKeeper not found (status code 404)
     */
    @ApiOperation(value = "Get a gateKeeper by ID", nickname = "getgateKeeperById", notes = "", response = GateKeeperObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested Gatekeeper has been retrived", response = GateKeeperObject.class),
        @ApiResponse(code = 404, message = "GateKeeper not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gatekeepers/{gatekeeperId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GateKeeperObject> getgateKeeperById(@ApiParam(value = "", required = true) @PathVariable("gatekeeperId") Integer gatekeeperId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"gateId\" : 6, \"aadhar\" : 1, \"id\" : 0, \"gateKeeperName\" : \"gateKeeperName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gatekeepers/{gatekeeperId} : Update a GateKeeper by ID
     *
     * @param gatekeeperId  (required)
     * @param updateGateKeeper  (required)
     * @return The updated GateKeeper (status code 200)
     *         or Bad Request (invalid request payload) (status code 400)
     *         or Resident not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Update a GateKeeper by ID", nickname = "updateGateKeeper", notes = "", response = GateKeeperObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated GateKeeper", response = GateKeeperObject.class),
        @ApiResponse(code = 400, message = "Bad Request (invalid request payload)"),
        @ApiResponse(code = 404, message = "Resident not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gatekeepers/{gatekeeperId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GateKeeperObject> updateGateKeeper(@ApiParam(value = "", required = true) @PathVariable("gatekeeperId") Integer gatekeeperId,@ApiParam(value = "", required = true) @Valid @RequestBody UpdateGateKeeper updateGateKeeper) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"gateId\" : 6, \"aadhar\" : 1, \"id\" : 0, \"gateKeeperName\" : \"gateKeeperName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /residents/{residentId} : Update a resident by ID
     *
     * @param residentId  (required)
     * @param updateResident  (required)
     * @return The updated resident (status code 200)
     *         or Bad Request (invalid request payload) (status code 400)
     *         or Resident not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Update a resident by ID", nickname = "updateResidents", notes = "", response = ResidentObject.class, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated resident", response = ResidentObject.class),
        @ApiResponse(code = 400, message = "Bad Request (invalid request payload)"),
        @ApiResponse(code = 404, message = "Resident not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/residents/{residentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResidentObject> updateResidents(@ApiParam(value = "", required = true) @PathVariable("residentId") Integer residentId,@ApiParam(value = "", required = true) @Valid @RequestBody UpdateResident updateResident) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 5, \"residentName\" : \"residentName\", \"aadhar\" : 1, \"id\" : 0, \"residenceId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /requests/view : View all the register requests made by users
     *
     * @return Approved the user (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "View all the register requests made by users", nickname = "viewRegnRequest", notes = "", response = UserObject.class, responseContainer = "List", tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Approved the user", response = UserObject.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/requests/view",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserObject>> viewRegnRequest() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phoneNumber\" : 1, \"aadhar\" : 6, \"userType\" : \"userType\", \"userName\" : \"userName\", \"userId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
