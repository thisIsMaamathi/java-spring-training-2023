/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cdw.springtraining.gatekeeper.api;

import cdw.springtraining.gatekeeper.models.LoginRequest;
import cdw.springtraining.gatekeeper.models.RegistrationRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-06T18:49:48.984700+05:30[Asia/Kolkata]")
@Validated
@Api(value = "Auth", description = "the Auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /register : allows a user to send registration request
     *
     * @param registrationRequest  (required)
     * @return Appended request (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "allows a user to send registration request", nickname = "registerUser", notes = "", response = String.class, tags={ "Auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Appended request", response = String.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> registerUser(@ApiParam(value = "", required = true) @Valid @RequestBody RegistrationRequest registrationRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /login : Allow the user to login
     *
     * @param loginRequest  (required)
     * @return Authenticated (status code 200)
     *         or Unauthorized - Enter credentials correctly (status code 401)
     *         or Forbidden,You dont have access (status code 403)
     */
    @ApiOperation(value = "Allow the user to login", nickname = "userLogin", notes = "", response = String.class, tags={ "Auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized - Enter credentials correctly"),
        @ApiResponse(code = 403, message = "Forbidden,You dont have access") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> userLogin(@ApiParam(value = "", required = true) @Valid @RequestBody LoginRequest loginRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /logout : Allow the user to log out
     *
     * @return Logged out successfully (status code 200)
     *         or Unauthorized - User is not authenticated (status code 401)
     */
    @ApiOperation(value = "Allow the user to log out", nickname = "userLogout", notes = "", response = String.class, tags={ "Auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged out successfully", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized - User is not authenticated") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/logout",
        produces = { "application/json" }
    )
    default ResponseEntity<String> userLogout() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
