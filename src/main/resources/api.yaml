openapi: 3.0.0
info:
  title: GateKeeper API
  description: Spring Final Project
  version: 1.0.0

servers:
  - url: http://localhost:8082
    description: Local development server

tags:
  - name: Resident
  - name: GateKeeper


paths:
  /residents:
    get:
      summary: To display a List of all residents
      operationId: getResidents
      tags:
        - Admin
      responses:
        '200':
          description: A List of all residents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResidentObject'

    post:
      summary: Create a new resident
      operationId: createResidents
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResident'
      responses:
        '201':
          description: Created a resident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidentObject'
        '400':
          description: Bad Request (invalid request payload)
        '500':
          description: Internal Server Error

  /residents/{residentId}:
    parameters:
      - name: residentId
        in: path
        required: true
        schema:
          type: integer
          format: int32

    get:
      summary: Get a resident by ID
      operationId: getResidentsById
      tags:
        - Admin
      responses:
        '200':
          description: The requested resident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidentObject'
        '404':
          description: Resident not found

    put:
      summary: Update a resident by ID
      operationId: updateResidents
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResident'
      responses:
        '200':
          description: The updated resident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidentObject'
        '400':
          description: Bad Request (invalid request payload)
        '404':
          description: Resident not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a resident by ID
      operationId: deleteResidents
      tags:
        - Admin
      responses:
        '200':
          description: Successful Deletion
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Resident not found
        '500':
          description: Internal Server Error



  /gatekeepers:
    get:
      summary: To display a List of all gatekeepers
      operationId: getGateKeeper
      tags:
        - Admin
      responses:
        '200':
          description: A List of all gatekeepers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GateKeeperObject'

    post:
      summary: Create a new gatekeeper
      operationId: createGateKeeper
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateKeeper'
      responses:
        '201':
          description: Created a GateKeeper
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GateKeeperObject'
        '400':
          description: Bad Request (invalid request payload)
        '500':
          description: Internal Server Error


  /gatekeepers/{gatekeeperId}:
    parameters:
      - name: gatekeeperId
        in: path
        required: true
        schema:
          type: integer
          format: int32

    get:
      summary: Get a gateKeeper by ID
      operationId: getgateKeeperById
      tags:
        - Admin
      responses:
        '200':
          description: The requested Gatekeeper has been retrived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GateKeeperObject'
        '404':
          description: GateKeeper not found

    put:
      summary: Update a GateKeeper by ID
      operationId: updateGateKeeper
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGateKeeper'
      responses:
        '200':
          description: The updated GateKeeper
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GateKeeperObject'
        '400':
          description: Bad Request (invalid request payload)
        '404':
          description: Resident not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a gateKeeper by ID
      operationId: deleteGateKeeper
      tags:
        - Admin
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Resident not found
        '500':
          description: Internal Server Error


  /gatekeeper/blacklist:
    post:
      summary: Blacklist a visitor
      operationId: gatekeeperBlacklist
      tags:
        - GateKeeper
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlackListRequest'
      responses:
        '200':
          description: Added to blacklist
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Visitor not found
        '500':
          description: Internal Server

  /resident/blacklist:
    post:
      summary: Blacklist a visitor or a gatekeeper
      operationId: residentBlacklist
      tags:
        - Resident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlackListRequest'
      responses:
        '200':
          description: Added to blacklist
          content:
            application/json:
              schema:
                type: string

        '404':
          description: Visitor not found
        '500':
          description: Internal Server Error

  /gatekeeper/visitors:
    get:
      summary: Get a list of visitors as per given date
      operationId: getVisitorsByDate
      tags:
        - GateKeeper
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: token
          in: header
          required: true
          schema:
            type: string

      responses:
        '200':
          description: A List of all visitors visiting on that date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'

        '404':
          description: Visitor not found
        '500':
          description: Internal Server Error

  /requests/approve/{requestId}:
    post:
      summary: Approve and save a user to database
      operationId: approveUser
      tags:
        - Admin
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Approved the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '500':
          description: Internal Server Error

  /requests/view:
    get:
      summary: View all the register requests made by users
      operationId: viewRegnRequest
      tags:
        - Admin
      responses:
        '200':
          description: Approved the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserObject'
        '500':
          description: Internal Server Error

  /register:
    post:
      summary: allows a user to send registration request
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        #        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'

      responses:
        '200':
          description: Appended request
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Internal Server Error


  /login:
    post:
      summary: Allow the user to login
      operationId: userLogin
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized - Enter credentials correctly
        '403':
          description: Forbidden,You dont have access


  /logoff:
    post:
      summary: Allow the user to log out
      operationId: userLogout
      tags:
        - Auth
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized - User is not authenticated

  /resident/schedule:
    post:
      summary: Allow the resident to schedule a visitors entry and generate a pass
      operationId: schedule
      tags:
        - Resident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
      responses:
        '200':
          description: Approved the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
        '500':
          description: Internal Server Error


  /resident/cancel/{visitorId}:
    delete:
      summary: To remove a visitor
      operationId: cancelVisitor
      tags:
        - Resident
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Resident not found
        '500':
          description: Internal Server Error

  /gateKeeper/approve/{visitorId}:
    put:
      summary: allows Gatekeeper to approve a visitor
      operationId: approveVisitor
      tags:
        - GateKeeper
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GateKeeperApprovalRequest'

      responses:
        '200':
          description: Approved the vistor
          content:
            application/json:
              schema:
                type: string

        '500':
          description: Internal Server Error




  /visitor:
    get:
      summary: Visitor can view all their information
      operationId: getVisitorDetails
      tags:
        - Visitors
      parameters:
        - name: visitorPass
          in: query
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Fetched visitor information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
        '500':
          description: Internal Server Error

components:
  schemas:

    GateKeeperApprovalRequest:
      type: object
      properties:
        pass:
          type: string
        gatekeeperId:
          type: integer
          format: int32

    #object for resident crud
    ResidentObject:
      type: object
      properties:
        id:
          type: integer
          format: int32
        residentName:
          type: string
        residenceId:
          type: integer
          format: int32
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64

    CreateResident:
      type: object
      properties:
        residentName:
          type: string
        residenceId:
          type: integer
          format: int32
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64


    UpdateResident:
      type: object
      properties:
        residentName:
          type: string
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64

    #operation for gatekeeper crud

    GateKeeperObject:
      type: object
      properties:
        id:
          type: integer
          format: int32
        gateKeeperName:
          type: string
        gateId:
          type: integer
          format: int32
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64

    CreateGateKeeper:
      type: object
      properties:
        gateKeeperName:
          type: string
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64



    UpdateGateKeeper:
      type: object
      properties:
        gateKeeperName:
          type: string
        gateId:
          type: integer
          format: int32
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64

    Visitor:
      type: object
      properties:
        visitorId:
          type: integer
          format: int32
        visitorName:
          type: string
        residenceId:
          type: integer
          format: int32

    ScheduleResponse:
      type: object
      properties:
        visitorId:
          type: integer
          format: int32
        name:
          type: string
        aadhar:
          type: integer
          format: int64
        date:
          type: string
          format: date
        phone:
          type: integer
          format: int64
        additionalInformation:
          type: string
        pass:
          type: string
        residenceId:
          type: integer
          format: int32


    RegistrationRequest:
      type: object
      required: [userName,aadhar,phoneNumber,firstName,lastName, mailId,dob,gender,userType,password]
      properties:
        userName:
          type: string
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64
        userType:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        mailId:
          type: string
          format: email
        dob:
          type: string
          format: date
        gender:
          type: string
        residenceId:
          type: integer  # This property is only applicable to residents
          format: int32



    LoginRequest:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string

    UserObject:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        userName:
          type: string
        aadhar:
          type: integer
          format: int64
        phoneNumber:
          type: integer
          format: int64
        userType:
          type: string


    ScheduleRequest:
      type: object
      properties:
        name:
          type: string

        aadhar:
          type: integer
          format: int64
        date:
          type: string
          format: date
        phone:
          type: integer
          format: int64
        additionalInformation:
          type: string
        residentId:
          type: integer
          format: int32

      required:
        - name
        - aadhar
        - date
        - phone
        - residentId



    BlackListRequest:
      type: object
      properties:
        aadhar:
          type: integer
          format: int64
        userType:
          type: string


